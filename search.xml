<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JAR包加密class文件防止反编译</title>
    <url>/2022/08/09/JAR%E5%8C%85%E5%8A%A0%E5%AF%86class%E6%96%87%E4%BB%B6%E9%98%B2%E6%AD%A2%E5%8F%8D%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通常来说，将代码打成jar包后，可以通过反编译工具得到源码。这对于代码隐蔽性是极大的挑战。常用的加密方式有代码混淆、编译加密运行动态解密、魔改JVM等；</p>
<p>本文采用第二种方式；</p>
<h2 id="编译期加密"><a href="#编译期加密" class="headerlink" title="编译期加密"></a>编译期加密</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>首先要知道，代码变为jar包需要经过编译的；maven将编译后的class文件统一打成jar包。但是这样，就等于泄露了代码源文件。所以需要在maven编译时做出调整，将指定的class替换成加密后的class，然后再打进jar包；</p>
<h3 id="maven插件"><a href="#maven插件" class="headerlink" title="maven插件"></a>maven插件</h3><p>通过自定义maven插件进行的实现</p>
<p>首先我们来看pom.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.bubuzi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>encryption-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    注意，这里的打包模式必须是maven-plugin   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>maven-plugin<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>bubuzi.changsha.RS1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        maven插件开发需引入的依赖     --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        版本随你的maven版本变动     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-plugin-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写插件加密类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.bubuzi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.bubuzi.SafeLoaderUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugin.AbstractMojo;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugin.MojoExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.apache.maven.plugin.MojoFailureException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@goal</span> deepcompile</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">//@Mojo(name = &quot;brakeFramePlugin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FramePlugin</span> <span class="keyword">extends</span> <span class="title">AbstractMojo</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 这里前三个成员变量注释请勿修改，这是读取maven配置的固定写法</span></span><br><span class="line">    <span class="comment">// 当然也有使用@Mojo的写法，需要引入额外的依赖，这里不做多介绍</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@parameter</span> property=&quot;protectClassNames&quot; default-value=&quot;&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; protectClassNames;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@parameter</span> property=&quot;noCompileClassNames&quot; default-value=&quot;&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; noCompileClassNames;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@parameter</span> property=&quot;output&quot; default-value=&quot;$&#123;project.build.directory&#125;&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String root;</span><br><span class="line">    <span class="keyword">private</span> File output;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; protectClassNameList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> MojoExecutionException, MojoFailureException </span>&#123;</span><br><span class="line">        getLog().info(<span class="string">&quot;执行jar包加密操作&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.output = <span class="keyword">new</span> File(root);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.protectCore(<span class="keyword">this</span>.output);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">protectCore</span><span class="params">(File root)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File file : root.listFiles()) &#123;</span><br><span class="line">                protectCore(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.getName().endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">            String className = root.getName().replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//class筛选</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (protectClassNames != <span class="keyword">null</span> &amp;&amp; protectClassNames.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String item : protectClassNames) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (className.equals(item)) &#123;</span><br><span class="line">                        flag = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (noCompileClassNames.contains(className)) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> deleteResult = root.delete();</span><br><span class="line">                <span class="keyword">if</span> (!deleteResult) &#123;</span><br><span class="line">                    System.gc();</span><br><span class="line">                    deleteResult = root.delete();</span><br><span class="line">                &#125;</span><br><span class="line">                getLog().info(String.format(<span class="string">&quot;[noCompile-deleteResult]:%s&quot;</span>, deleteResult));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag &amp;&amp; !protectClassNameList.contains(className)) &#123;</span><br><span class="line">                protectClassNameList.add(className);</span><br><span class="line">                getLog().info(String.format(<span class="string">&quot;[protectCore]:%s&quot;</span>, className));</span><br><span class="line">                FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">byte</span>[] instrumentBytes = doProtectCore(root);</span><br><span class="line">                    <span class="comment">//加密后的class文件保存路径</span></span><br><span class="line">                    String folderPath = output.getAbsolutePath() + <span class="string">&quot;\\&quot;</span> + <span class="string">&quot;classes&quot;</span>;</span><br><span class="line">                    File folder = <span class="keyword">new</span> File(folderPath);</span><br><span class="line">                    <span class="keyword">if</span> (!folder.exists()) &#123;</span><br><span class="line">                        folder.mkdir();</span><br><span class="line">                    &#125;</span><br><span class="line">                    folderPath = output.getAbsolutePath() + <span class="string">&quot;\\&quot;</span> + <span class="string">&quot;classes&quot;</span> + <span class="string">&quot;\\&quot;</span> + <span class="string">&quot;coreclass&quot;</span>;</span><br><span class="line">                    folder = <span class="keyword">new</span> File(folderPath);</span><br><span class="line">                    <span class="keyword">if</span> (!folder.exists()) &#123;</span><br><span class="line">                        folder.mkdir();</span><br><span class="line">                    &#125;</span><br><span class="line">                    String filePath = output.getAbsolutePath() + <span class="string">&quot;\\&quot;</span> + <span class="string">&quot;classes&quot;</span> + <span class="string">&quot;\\&quot;</span> + <span class="string">&quot;coreclass&quot;</span> + <span class="string">&quot;\\&quot;</span> + className + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">                    getLog().info(<span class="string">&quot;[filePath]: &quot;</span> + filePath);</span><br><span class="line">                    File protectFile = <span class="keyword">new</span> File(filePath);</span><br><span class="line">                    <span class="keyword">if</span> (protectFile.exists()) &#123;</span><br><span class="line">                        protectFile.delete();</span><br><span class="line">                    &#125;</span><br><span class="line">                    protectFile.createNewFile();</span><br><span class="line">                    fos = <span class="keyword">new</span> FileOutputStream(protectFile);</span><br><span class="line">                    fos.write(instrumentBytes);</span><br><span class="line">                    fos.flush();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    getLog().info(<span class="string">&quot;[protectCore-exception]:&quot;</span> + className);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        fos.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (root.exists()) &#123;</span><br><span class="line">                        <span class="keyword">boolean</span> deleteResult = root.delete();</span><br><span class="line">                        <span class="keyword">if</span> (!deleteResult) &#123;</span><br><span class="line">                            System.gc();</span><br><span class="line">                            deleteResult = root.delete();</span><br><span class="line">                        &#125;</span><br><span class="line">                        getLog().info(<span class="string">&quot;[protectCore-deleteResult]:&quot;</span> + deleteResult);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] doProtectCore(File clsFile) <span class="keyword">throws</span> MojoExecutionException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(clsFile);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) clsFile.length()];</span><br><span class="line">            getLog().info(<span class="string">&quot;origin length:&quot;</span> + bytes.length);</span><br><span class="line">            inputStream.read(bytes);</span><br><span class="line">            <span class="comment">// jdk9+</span></span><br><span class="line"><span class="comment">//            byte[] bytes = inputStream.readAllBytes();</span></span><br><span class="line">            <span class="comment">// SafeLoaderUtil.encryption加密为JNI调用的C++程序，可以采用不同实现</span></span><br><span class="line">            <span class="keyword">byte</span>[] encipherByte = SafeLoaderUtil.encryption(bytes);</span><br><span class="line">            inputStream.close();</span><br><span class="line">            <span class="keyword">return</span> encipherByte;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MojoExecutionException(<span class="string">&quot;doProtectCore error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码种的SafeLoaderUtil.encryption的JNI调用方法可参考上一篇文章</p>
<h3 id="maven插件打包安装"><a href="#maven插件打包安装" class="headerlink" title="maven插件打包安装"></a>maven插件打包安装</h3><p><strong>一定要安装至本地！！！</strong></p>
<p><strong>一定要安装至本地！！！</strong></p>
<p><strong>一定要安装至本地！！！</strong></p>
<p><img src="https://s2.loli.net/2022/08/09/s2ETPfuq19XRdUY.png" alt="image-20220809092513798"></p>
<h3 id="加密项目配置"><a href="#加密项目配置" class="headerlink" title="加密项目配置"></a>加密项目配置</h3><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            引入maven加密插件     --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.bubuzi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>encryption-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>bubuzi.changsha.RS1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--            必须填写，设置编译器动作     --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>deepcompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--            这里可改为全类名，暂时未优化     --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--            写入需要加密的类名称     --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">protectClassNames</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">protectClassName</span>&gt;</span>LoginServiceImpl<span class="tag">&lt;/<span class="name">protectClassName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">protectClassNames</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>配置好pom后，就可以愉快的打包了</p>
<p>可以看见，日志中正确输出了打包相关内容。</p>
<p><img src="https://s2.loli.net/2022/08/09/evlqKtF9EHB1Lg2.png" alt="image-20220809093251630"></p>
<p>项目结构里，LoginServiceImpl类应该存在于impl包下</p>
<p><img src="https://s2.loli.net/2022/08/09/j5XEgWHGUIR93nb.png" alt="image-20220809093411656"></p>
<p>查看jar包内结构</p>
<p>使用压缩包的模式打开jar</p>
<p><img src="https://s2.loli.net/2022/08/09/n3NaTOxPQclvXzK.png" alt="image-20220809093533570"></p>
<p><img src="https://s2.loli.net/2022/08/09/c6bvi7ptkFq1YAN.png" alt="image-20220809093548178"></p>
<p><img src="https://s2.loli.net/2022/08/09/NWAUI8zZ3PMaulE.png" alt="image-20220809093632308"></p>
<p><img src="https://s2.loli.net/2022/08/09/bsnF6YT95vSeZUy.png" alt="image-20220809093702549"><br>可以看见，本应在impl包下的LoginServiceImpl类，去了coreclass文件夹下</p>
<p>这就是加密完成</p>
<p>通过idea反编译加密class文件，可以看见根本无法查阅</p>
<p><img src="https://s2.loli.net/2022/08/09/Cer1kmRSciWExvy.png" alt="image-20220809095217583"></p>
<h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><h3 id="运行时解密"><a href="#运行时解密" class="headerlink" title="运行时解密"></a>运行时解密</h3><p>在这里我查阅了许多资料，始终没能找到使我满意的解答方式；</p>
<p>这与springboot的加载机制有关系，起初我想用classloader的方式动态加载，一直未能成功，感兴趣的同志可以去了解以下springboot的加载机制，还有要注意jdk版本问题，jdk8及以下与jdk8以上的类加载机制有部分变化；</p>
<p>最终采用的一种折中方案；</p>
<p>我们都知道，spring会将beanClass封装成一个BeanDefinition对象，然后再通过bean别名，一一对应的方式注册进IOC容器；</p>
<p>所以，我们只需要在spring容器启动后，手动将加密类注册进容器，后续bean创建时，就会使用我们注入的class；</p>
<h3 id="解密类"><a href="#解密类" class="headerlink" title="解密类"></a>解密类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticEncryptLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> StaticEncryptLoader INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// spring bean 默认bean工厂</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> DefaultListableBeanFactory beanFactory;</span><br><span class="line">    <span class="comment">// 用于存储class类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; classes = <span class="keyword">new</span> ConcurrentHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// jni调用，请查看上一章</span></span><br><span class="line">        System.loadLibrary(<span class="string">&quot;EncryptionLoader&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticEncryptLoader</span><span class="params">(ClassLoader parent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  StaticEncryptLoader <span class="title">getInstance</span><span class="params">(ClassLoader parent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (StaticEncryptLoader.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> StaticEncryptLoader(parent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticEncryptLoader <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于加载所有加密类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loadClasses2Cache();</span><br><span class="line"><span class="comment">//            checkPool.scheduleWithFixedDelay(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    loadClasses2Cache();</span></span><br><span class="line"><span class="comment">//                &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;, 60, 60, TimeUnit.SECONDS);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadClasses2Cache</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Resource[] resources = <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">&quot;/coreclass/**/*.class&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Resource resource : resources) &#123;</span><br><span class="line">            <span class="keyword">byte</span> pack[] = <span class="keyword">null</span>;</span><br><span class="line">            InputStream inputStream = resource.getInputStream();</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">                count = inputStream.available();</span><br><span class="line">            &#125;</span><br><span class="line">            pack = <span class="keyword">new</span> <span class="keyword">byte</span>[count];</span><br><span class="line">            <span class="keyword">int</span> readCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (readCount &lt; count) &#123;</span><br><span class="line">                readCount += inputStream.read(pack, readCount, count - readCount);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span>[] decryption = SafeLoaderUtil.decryption(pack);</span><br><span class="line">            Class&lt;?&gt; aClass = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                aClass = defineClass(<span class="string">&quot;top.bubuzi.service.impl.LoginServiceImpl&quot;</span>, decryption, <span class="number">0</span>, decryption.length);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassFormatError classFormatError) &#123;</span><br><span class="line">                classFormatError.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 由于现在只写了一个加密类，直接全类名注入了，实际操作时，需要将全路径匹配为全类名</span></span><br><span class="line">            <span class="comment">// 如，现在为coreclass/LoginServiceImpl，后续调整为，coreclass</span></span><br><span class="line">            classes.put(<span class="string">&quot;top.bubuzi.service.impl.LoginServiceImpl&quot;</span>,aClass);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registryBeans</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(classes) &amp;&amp; beanFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            classes.forEach(</span><br><span class="line">                    (k, v) -&gt; &#123;</span><br><span class="line">                        registryBean(k);</span><br><span class="line">                    &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向spring容器注入beanDefinition</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className 全限定名 (com.xxx.xx.XXXX)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registryBean</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        Class cla = classes.get(className.replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (SpringUtil.isSpringBeanClass(cla) &amp;&amp; beanFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            BeanDefinition beanDefinition = SpringUtil.buildBeanDefinition(cla);</span><br><span class="line">            <span class="comment">//将变量首字母置小写</span></span><br><span class="line">            String beanName = StringUtils.uncapitalize(className);</span><br><span class="line">            beanName = beanName.substring(beanName.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">            beanName = StringUtils.uncapitalize(beanName);</span><br><span class="line">            <span class="comment">// 注意，这里的beanName为ioc容器自动注入提供服务，请确保你的容器名称是否匹配</span></span><br><span class="line">            safeRegistry(className, beanDefinition);</span><br><span class="line">            safeRegistry(beanName, beanDefinition);</span><br><span class="line">            <span class="keyword">if</span>(beanName.endsWith(<span class="string">&quot;Impl&quot;</span>) )&#123;</span><br><span class="line">                safeRegistry(beanName.replace(<span class="string">&quot;Impl&quot;</span>,<span class="string">&quot;&quot;</span>), beanDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">safeRegistry</span><span class="params">(String name,BeanDefinition beanDefinition)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!beanFactory.containsBean(name))&#123;</span><br><span class="line">            beanFactory.registerBeanDefinition(name,beanDefinition);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Object bean = beanFactory.getBean(name);</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="容器加载类"><a href="#容器加载类" class="headerlink" title="容器加载类"></a>容器加载类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRegistry</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        StaticEncryptLoader instance = StaticEncryptLoader.getInstance();</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        instance.setBeanFactory((DefaultListableBeanFactory) beanFactory);</span><br><span class="line">        <span class="keyword">if</span>(!(beanFactory.getBeanClassLoader() <span class="keyword">instanceof</span> StaticEncryptLoader))&#123;</span><br><span class="line">            beanFactory.setBeanClassLoader(instance);</span><br><span class="line">        &#125;</span><br><span class="line">        instance.registryBeans();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;top.bubuzi&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;top.bubuzi.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlatformApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载加密类元信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        StaticEncryptLoader instance = StaticEncryptLoader.getInstance(PlatformApplication.class.getClassLoader());</span><br><span class="line">        instance.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PlatformApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动后正常无报错即加密成功</p>
<h2 id="后文"><a href="#后文" class="headerlink" title="后文"></a>后文</h2><p>本方法只能避免jar包直接被反编译，不能实现完全的加密防护，实际上百分百防护是做不到的；</p>
<p>但是这里依旧有优化项点：</p>
<pre><code>*    不采用beanFactory，而采用classLoader的方式
*    加密classLoader，隐藏解密程序，classLoader采用分片注入程序的方式
*    核心代码用安全性高的语言实现，如c++实现后jni调用
*    魔改JVM加载机制
</code></pre>
<p>希望本文能帮到你</p>
]]></content>
      <tags>
        <tag>JNI</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA与C++交互（JNI）</title>
    <url>/2022/08/09/JAVA%E4%B8%8EC-%E4%BA%A4%E4%BA%92%EF%BC%88JNI%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h1><h2 id="编写Java类"><a href="#编写Java类" class="headerlink" title="编写Java类"></a>编写Java类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hnzdf.brakePlatform.maven;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;TestMain&quot;</span>);</span><br><span class="line">        TestMain jniDemo = <span class="keyword">new</span> TestMain();</span><br><span class="line">        jniDemo.testHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="生成头文件"><a href="#生成头文件" class="headerlink" title="生成头文件"></a>生成头文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac -h .  cn\hnzdf\brakePlatform\maven\TestMain.java</span><br></pre></td></tr></table></figure>

<p>执行后会在路径下生成头文件，cn_hnzdf_brakePlatform_maven_TestMain.h</p>
<p><img src="https://s2.loli.net/2022/08/04/Rvktb6VOfhQX5Gs.png" alt="image-20220804144508009"></p>
<h2 id="编写c-代码"><a href="#编写c-代码" class="headerlink" title="编写c++代码"></a>编写c++代码</h2><h3 id="在Visual-Studio中新建项目"><a href="#在Visual-Studio中新建项目" class="headerlink" title="在Visual Studio中新建项目"></a>在Visual Studio中新建项目</h3><p>选择动态链接库</p>
<p><img src="https://s2.loli.net/2022/08/04/2ShEdx7agArjz3P.png" alt="image-20220804144301505"></p>
<p><img src="https://s2.loli.net/2022/08/04/RzdAoXMxHkPy9Dq.png" alt="image-20220804144345606"></p>
<p>建完以后的结构</p>
<p><img src="https://s2.loli.net/2022/08/04/EaLi2yjWhonZg6R.png" alt="image-20220804144416544"></p>
<h3 id="将必要头文件拷贝进项目"><a href="#将必要头文件拷贝进项目" class="headerlink" title="将必要头文件拷贝进项目"></a>将必要头文件拷贝进项目</h3><ol>
<li>需要具体实现的头文件，cn_hnzdf_brakePlatform_maven_TestMain.h；</li>
<li>jni.h，该文件在jdk安装目录下，如：D:\ENV\Java\jdk-11.0.11\include\jni.h</li>
<li>jni_md.h，该文件在jdk安装目录下，如：D:\ENV\Java\jdk-11.0.11\include\win32\jni_md.h</li>
</ol>
<p><strong>一定要使用vs自己的导入，切不可直接粘贴</strong></p>
<p><strong>一定要使用vs自己的导入，切不可直接粘贴</strong></p>
<p><strong>一定要使用vs自己的导入，切不可直接粘贴</strong></p>
<p><img src="https://s2.loli.net/2022/08/04/HTLR87w9fm3yWMI.png" alt="image-20220804145056181"></p>
<h3 id="新建实现类"><a href="#新建实现类" class="headerlink" title="新建实现类"></a>新建实现类</h3><p>右键源代码，直接创建类</p>
<p><img src="https://s2.loli.net/2022/08/04/eulgirwCyKh3Spf.png" alt="image-20220804145441318"><img src="https://s2.loli.net/2022/08/04/OKvqtiDb8hX7uME.png" alt="image-20220804145734320"></p>
<p>在类的头文件中导入必要依赖</p>
<p><img src="https://s2.loli.net/2022/08/04/xPkWGhNKeByvAY1.png" alt="image-20220804145804999"></p>
<p>在TestMain.cpp中写入以下内容，注意”pch.h”必须依赖</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TestMain.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_cn_hnzdf_brakePlatform_maven_TestMain_testHello</span><br><span class="line">(JNIEnv*, jobject) &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;this is C++ print&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="引用调整"><a href="#引用调整" class="headerlink" title="引用调整"></a>引用调整</h3><p>生成的头文件中的引用，</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原来</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">// 改为</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;jni.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>右键解决方案，点击生成</p>
<p><img src="https://s2.loli.net/2022/08/04/jrNiKs8cWR4SmOA.png" alt="image-20220804150014717"></p>
<h3 id="将生成的dll拷贝至jdk安装目录的bin目录下"><a href="#将生成的dll拷贝至jdk安装目录的bin目录下" class="headerlink" title="将生成的dll拷贝至jdk安装目录的bin目录下"></a>将生成的dll拷贝至jdk安装目录的bin目录下</h3><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 这里不要写dll后缀</span></span><br><span class="line">        System.loadLibrary(<span class="string">&quot;TestMain&quot;</span>);</span><br><span class="line">        TestMain jniDemo = <span class="keyword">new</span> TestMain();</span><br><span class="line">        jniDemo.testHello();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://s2.loli.net/2022/08/04/qs31PELmkaplTUi.png" alt="image-20220804150151500"></p>
]]></content>
      <categories>
        <category>JNI</category>
      </categories>
      <tags>
        <tag>JNI</tag>
        <tag>JAVA</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat源码分析————Tomcat类加载</title>
    <url>/2022/04/28/Tomcat%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94Tomcat%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>类加载的过程中，“通过一个类的全限定名来获取描述此类的二级制字节流”这个动作放到JVM虚拟机外部去实现，由用户程序自己去选择如何加载所需的类；实现此方法的类便是类加载器；</p>
<h2 id="JVM中是如何判断两个Class是否相等的？"><a href="#JVM中是如何判断两个Class是否相等的？" class="headerlink" title="JVM中是如何判断两个Class是否相等的？"></a>JVM中是如何判断两个Class是否相等的？</h2><p>类加载器将类元数据装载至JVM。</p>
<p>对任意的一个类来说，都需要这个类本身和其类加载其共同确认在JVM中的唯一性；</p>
<p>比如，在一个程序中，存在类加载器ALoader与BLoader，同时存在唯一一个类，top.bubuzi.App；情况如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; ALoadClass ALoader.loadClass(<span class="string">&#x27;top.bubuzi.App&#x27;</span>);</span><br><span class="line">Class&lt;?&gt; BLoadClass BLoader.loadClass(<span class="string">&#x27;top.bubuzi.App&#x27;</span>);</span><br><span class="line">System.out.println(ALoadClass == BLoadClass); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>可以看见，及时是来着同源的类，在不同加载器下，类元信息并不相等；这就实现了加载器隔离；</p>
<h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>在JAVA中提供了三种类型的系统类加载器</p>
<ul>
<li><p>启动类加载器（Bootstrap ClassLoader）</p>
<p>由C++底层实现，属于JVM核心的一部分，用于加载**${JAVA_HOME}/lib**目录下的文件，或者被-Xbootclasspath参数所指定路径中的文件，该加载器只能加载特定名称的文件，如（rt.jar），并非目录下全部文件；该加载器无法被用户直接引用；</p>
</li>
<li><p>扩展类加载器（Extension ClassLoader）</p>
<p>由<strong>sun.misc.Launcher.ExtClassLoader</strong>实现，它负责加载**${JAVA_HOME}/lib/ext**目录中的文件，或被java.ext.dirs系统变量所指定的路径中的类，开发者可以直接使用扩展类加载器；</p>
<p><strong>JDK1.8后ExtClassLoader被废弃，使用PlatformClassLoader</strong></p>
</li>
<li><p>应用程序类加载器（Application ClassLoader）</p>
<p>也称系统类加载器，由sun.misc.Launcher.AppClassLoader实现。负责加载用户类路径(Class Path)上所指定的类库，开发者可以直接使用这个类加载器。<strong>一般程序默认使用该加载器</strong></p>
</li>
</ul>
<p>应用程序都是由这3种类加载器互相配合进行加载的，如果有必要，还可以加入自己定义的类加载器。加载流程如下图所示：</p>
<p><img src="https://s2.loli.net/2022/04/28/RqfBc7j5L6GIivO.png" alt="img"></p>
<p>在JDK1.8版本以上，若代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ClassLoader classLoader = App.class.getClassLoader();</span><br><span class="line">    <span class="keyword">while</span> (classLoader!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        classLoader = classLoader.getParent();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会出现打印：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdk.internal.loader.ClassLoaders$AppClassLoader@2437c6dc</span><br><span class="line">jdk.internal.loader.ClassLoaders$PlatformClassLoader@6e8dacdf</span><br></pre></td></tr></table></figure>

<p>其中并没打印出PlatformClassLoader的父加载器<strong>启动类加载器（Bootstrap ClassLoader）</strong>，因为启动类加载器属于JVM的一部分，是无法被用户直接引用到的；</p>
<p>Java类加载层级称为：<strong>双亲委派模型</strong>。它的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p>
<h3 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h3><p>都知道java.lang.Object是java中所有类的父类，它存放在rt.jar之中，按照双亲委派模型，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。试想，如果没有使用双亲委派模型，由各个类加载器自行去加载，显然，这就存在很大风险，用户完全可以恶意编写一个java.lang.Object类，然后放到ClassPath下，那系统就会出现多个Object类，Java类型体系中最基础的行为也就无法保证，应用程序也将会变得一片混乱。</p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>以下代码取自 <strong>JDK11</strong> 中 <strong>java.lang.ClassLoader</strong> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 由JVM实现的启动类加载器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> Class&lt;?&gt; findBootstrapClass(String name);</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; findBootstrapClassOrNull(String name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!checkName(name)) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> findBootstrapClass(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 判断该类是否已被加载，返回该类的类元信息</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 父加载器存在，调用父类加载</span></span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 父加载器不存在，调用启动类加载器加载</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 再经历父加载和系统加载后，依旧为被正确加载类元信息</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                <span class="comment">// 调用自身的加载函数</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回加载类的类元信息</span></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总得来说，类加载过程分为三个阶段：</p>
<ul>
<li>查找对应类是否加载，若加载直接返回类元；</li>
<li>若未加载，递归调用父类加载器的加载函数，直到父类为空时，再调用启动类加载器去加载；</li>
<li>若上面均未加载到类元，则使用加载器本身的加载函数去加载类元信息；</li>
</ul>
<h2 id="打破双亲委派模型"><a href="#打破双亲委派模型" class="headerlink" title="打破双亲委派模型"></a>打破双亲委派模型</h2><p>核心实现：<strong>线程上下文类加载器（Thread Context ClassLoader）</strong></p>
<p>这个类加载器可以通过<strong>java.lang.Thread</strong>类中的<strong>setContextClassLoader</strong>方法进行设置，若创建线程时还未设置，它将会从父线程中继承一个类加载器，如果全局均为配置，那么默认就是<strong>应用程序加载器（Application ClassLoader）</strong>；</p>
]]></content>
      <categories>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装docker和docker-compose</title>
    <url>/2021/04/22/Linux%E4%B8%8B%E5%AE%89%E8%A3%85docker%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="通过脚本安装"><a href="#通过脚本安装" class="headerlink" title="通过脚本安装"></a>通过脚本安装</h3><ul>
<li>国内一键安装 sudo curl -sSL <a href="https://get.daocloud.io/docker">https://get.daocloud.io/docker</a> | sh</li>
<li>国外一键安装 sudo curl -sSL get.docker.com | sh<h3 id="通过apt安装"><a href="#通过apt安装" class="headerlink" title="通过apt安装"></a>通过apt安装</h3>输入命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install -y docker</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>安装完成后输入以下命令，若正常输出版本，则安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker version</span><br></pre></td></tr></table></figure>

<h2 id="Docker-compose安装"><a href="#Docker-compose安装" class="headerlink" title="Docker-compose安装"></a>Docker-compose安装</h2><h3 id="通过官方脚本安装"><a href="#通过官方脚本安装" class="headerlink" title="通过官方脚本安装"></a>通过官方脚本安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>
<h3 id="使用pip安装"><a href="#使用pip安装" class="headerlink" title="使用pip安装"></a>使用pip安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get install -y python3-pip curl vim git moreutils</span><br><span class="line">$ pip3 install --upgrade pip</span><br><span class="line">$ pip install docker-compose</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu配置软件源</title>
    <url>/2021/04/22/Ubuntu%E9%85%8D%E7%BD%AE%E8%BD%AF%E4%BB%B6%E6%BA%90/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>防止修改软件源后出现问题，先将系统原有软件源备份一份。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp /etc/apt/sources.list  /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<!-- more -->
<h2 id="添加软件源"><a href="#添加软件源" class="headerlink" title="添加软件源"></a>添加软件源</h2><p>命令行输入如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>添加阿里源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p><a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/">添加清华源</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>更新软件源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>更新软件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get upgrade </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>docker命令全解</title>
    <url>/2021/04/22/docker%E5%91%BD%E4%BB%A4%E5%85%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure>
<h5 id="OPTIONS说明："><a href="#OPTIONS说明：" class="headerlink" title="OPTIONS说明："></a>OPTIONS说明：</h5><ul>
<li>-d: 分离模式：在后台运行</li>
<li>-i: 即使没有附加也保持STDIN 打开</li>
<li>-t: 分配一个伪终端<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5>进入某个容器的bash<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it 容器名 /bin/sh</span><br></pre></td></tr></table></figure>
<blockquote>
<p>某些情况下，/bin/sh可能换成/bin/bash或者其他内容</p>
</blockquote>
<h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4></li>
</ul>
<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>git多秘钥管理</title>
    <url>/2021/04/22/git%E5%A4%9A%E7%A7%98%E9%92%A5%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在某些情况下，我需要在一台电脑保存多个git账号。<br>例如，在公司时连接公司项目使用公司密钥，回到家写个人项目时使用自己的密钥。</p>
<span id="more"></span>

<!-- more -->

<h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><p>编辑配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br></pre></td></tr></table></figure>
<p>输入以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 自定义的host</span><br><span class="line">Host git.ibubuzi</span><br><span class="line">  # 指向 github</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  # 指向前面生成的ssh秘钥,地址可随意</span><br><span class="line">  IdentityFile ~&#x2F;.ssh&#x2F;git.ibubuzi&#x2F;id_rsa</span><br><span class="line">  # 指定唯一</span><br><span class="line">  IdentitiesOnly true</span><br><span class="line"># 当然可以配置多地址</span><br><span class="line">#Host host2</span><br><span class="line">#  HostName server</span><br></pre></td></tr></table></figure>

<h2 id="导入仓库"><a href="#导入仓库" class="headerlink" title="导入仓库"></a>导入仓库</h2><p>配置完成后需要修改clone地址<br>原地址如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:bubuzi&#x2F;helloworld.git</span><br></pre></td></tr></table></figure>
<p>改为配置的主机地址，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git@git.ibubuzi:bubuzi&#x2F;helloworld.git</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>京东签到脚本</title>
    <url>/2021/04/25/jd-bot%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="05ddc23583fe53ad59bab4a4127c84b38ff95db93766a22e4a965c5084b4c16a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>git操作</title>
    <url>/2021/05/18/git%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="git基础"><a href="#git基础" class="headerlink" title="git基础"></a>git基础</h2><p>学习git，首先要了解几个概念</p>
<p><img src="https://i.loli.net/2021/05/18/cprAeDzadNG2u4T.jpg" alt="img"></p>
<ul>
<li>working dir 这个是工作区，我们一般都处在工作区中</li>
<li>index 这个是缓存区，可以临时保存你的改动</li>
<li>HEAD 指向你最新提交的结果(上图没显示)</li>
<li>哈希号 可以认为是某次提交的身份证号码(上图没显示)</li>
<li>local repository : 本地仓库</li>
<li>remote repository:远程仓库</li>
</ul>
<h2 id="安装初始化git"><a href="#安装初始化git" class="headerlink" title="安装初始化git"></a>安装初始化git</h2><p>正常我们都是在Linux下开发和使用git，如果在windows和苹果下开发，请自行百度</p>
<p>安装git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sudo apt-get install git </span></span><br><span class="line"><span class="comment">#sudo apt-get install git-doc git-svn git-email git-gui gitk</span></span><br><span class="line">初始化git</span><br><span class="line"></span><br><span class="line">ssh-keygen <span class="comment">#生成git key 默认在.ssh目录下</span></span><br><span class="line">git init <span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">git init [project-name] <span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">git <span class="built_in">clone</span> [url]<span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">git config --list<span class="comment"># 显示当前的Git配置</span></span><br><span class="line">git config -e [--global]<span class="comment"># 编辑Git配置文件</span></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="代码提交相关命令"><a href="#代码提交相关命令" class="headerlink" title="代码提交相关命令"></a>代码提交相关命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/username/repo name.git <span class="comment"># 从远程仓库下载代码</span></span><br><span class="line">git status . <span class="comment"># 查看当前工作区的修改</span></span><br><span class="line">git add * <span class="comment"># 跟踪新文件</span></span><br><span class="line">git add -u [path] <span class="comment"># 添加[指定路径下]已跟踪文件</span></span><br><span class="line"></span><br><span class="line">rm *&amp;git rm * <span class="comment"># 移除文件</span></span><br><span class="line">git rm -f * <span class="comment"># 移除文件</span></span><br><span class="line">git rm --cached * <span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">git mv file_from file_to <span class="comment"># 重命名跟踪文件</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> <span class="comment"># 查看提交记录</span></span><br><span class="line"></span><br><span class="line">git commit <span class="comment"># 提交更新    </span></span><br><span class="line">git commit [file1] [file2] ... <span class="comment"># 提交指定文件    </span></span><br><span class="line">git commit -m <span class="string">&#x27;message&#x27;</span></span><br><span class="line">git commit -a <span class="comment"># 跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交</span></span><br><span class="line">git commit --amend<span class="comment">#修改最后一次提交</span></span><br><span class="line">git commit -v <span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line"></span><br><span class="line">git reset HEAD *<span class="comment">#取消已经暂存的文件</span></span><br><span class="line">git reset --mixed HEAD *<span class="comment">#同上</span></span><br><span class="line">git reset --soft HEAD *<span class="comment">#重置到指定状态，不会修改索引区和工作树</span></span><br><span class="line">git reset --hard HEAD *<span class="comment">#重置到指定状态，会修改索引区和工作树</span></span><br><span class="line">git reset -- files<span class="comment">#重置index区文件</span></span><br><span class="line"></span><br><span class="line">git revert HEAD <span class="comment">#撤销前一次操作</span></span><br><span class="line">git revert HEAD~ <span class="comment">#撤销前前一次操作</span></span><br><span class="line">git revert commit <span class="comment">## 撤销指定操作</span></span><br><span class="line"></span><br><span class="line">git checkout -- file<span class="comment">#取消对文件的修改(从暂存区——覆盖worktree file)</span></span><br><span class="line">git checkout branch|tag|commit -- file_name<span class="comment">#从仓库取出file覆盖当前分支</span></span><br><span class="line">git checkout -- .<span class="comment">#从暂存区取出文件覆盖工作区</span></span><br><span class="line"></span><br><span class="line">git diff file <span class="comment">#查看指定文件的差异</span></span><br><span class="line">git diff --<span class="built_in">stat</span> <span class="comment">#查看简单的diff结果</span></span><br><span class="line">git diff <span class="comment">#比较Worktree和Index之间的差异</span></span><br><span class="line">git diff --cached <span class="comment">#比较Index和HEAD之间的差异</span></span><br><span class="line">git diff HEAD <span class="comment">#比较Worktree和HEAD之间的差异</span></span><br><span class="line">git diff branch <span class="comment">#比较Worktree和branch之间的差异</span></span><br><span class="line">git diff branch1 branch2 <span class="comment">#比较两次分支之间的差异</span></span><br><span class="line">git diff commit commit <span class="comment">#比较两次提交之间的差异</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --grep=aplog <span class="comment">#查找关键字aplog</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">#查看最近的提交日志</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline <span class="comment">#单行显示提交日志</span></span><br><span class="line">git <span class="built_in">log</span> --graph <span class="comment"># 图形化显示</span></span><br><span class="line">git <span class="built_in">log</span> --abbrev-commit <span class="comment"># 显示log id的缩写</span></span><br><span class="line">git <span class="built_in">log</span> -num <span class="comment">#显示第几条log(倒数)</span></span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span> <span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">git <span class="built_in">log</span> --follow [file] <span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">git <span class="built_in">log</span> -p [file] <span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">git <span class="built_in">log</span> --oneline <span class="comment">#只用一行显示每次的提交包含哈希号和commit内容 </span></span><br><span class="line"></span><br><span class="line">git stash <span class="comment">#将工作区现场(已跟踪文件)储藏起来，等以后恢复后继续工作。</span></span><br><span class="line">git stash list <span class="comment">#查看保存的工作现场</span></span><br><span class="line">git stash apply <span class="comment">#恢复工作现场</span></span><br><span class="line">git stash drop <span class="comment">#删除stash内容</span></span><br><span class="line">git stash pop <span class="comment">#恢复的同时直接删除stash内容 最好不要这么干，除非你下次确认不会再使用缓存数据</span></span><br><span class="line">git stash apply stash@&#123;0&#125; <span class="comment">#恢复指定的工作现场，当你保存了不只一份工作现场时。</span></span><br></pre></td></tr></table></figure>

<h2 id="分支操作命令相关"><a href="#分支操作命令相关" class="headerlink" title="分支操作命令相关"></a>分支操作命令相关</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch <span class="comment">#列出本地分支</span></span><br><span class="line">git branch -r<span class="comment">#列出远端分支 为了方便查看，前面会有一个*号显示</span></span><br><span class="line">git branch -a<span class="comment">#列出所有分支</span></span><br><span class="line">git branch -v<span class="comment">#查看各个分支最后一个提交对象的信息</span></span><br><span class="line">git branch --merge<span class="comment">#查看已经合并到当前分支的分支</span></span><br><span class="line">git branch --no-merge<span class="comment">#查看为合并到当前分支的分支</span></span><br><span class="line">git branch <span class="built_in">test</span><span class="comment">#新建test分支</span></span><br><span class="line">git branch branch [branch|commit|tag] <span class="comment"># 从指定位置出新建分支</span></span><br><span class="line">git branch --track branch remote-branch <span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">git branch -m old new <span class="comment">#重命名分支</span></span><br><span class="line">git branch -d <span class="built_in">test</span> <span class="comment">#删除test分支</span></span><br><span class="line">git branch -D <span class="built_in">test</span> <span class="comment">#强制删除test分支 可以多分支同时删除</span></span><br><span class="line">git branch --set-upstream dev origin/dev <span class="comment">#将本地dev分支与远程dev分支之间建立链接</span></span><br><span class="line"></span><br><span class="line">git checkout <span class="built_in">test</span><span class="comment">#切换到test分支</span></span><br><span class="line">git checkout -b <span class="built_in">test</span><span class="comment">#新建+切换到test分支</span></span><br><span class="line">git checkout -b <span class="built_in">test</span> dev<span class="comment">#基于dev新建test分支，并切换</span></span><br><span class="line"></span><br><span class="line">git merge <span class="built_in">test</span><span class="comment">#将test分支合并到当前分支</span></span><br><span class="line">git merge --squash <span class="built_in">test</span> <span class="comment">## 合并压缩，将test上的commit压缩为一条</span></span><br><span class="line"></span><br><span class="line">git cherry-pick commit <span class="comment">#拣选合并，将commit合并到当前分支，比如我们之前在dev分支下做了一个修改，然后切换到master下面来，同步了最新的代码，可以通过cherry-pick把之前的提交同步过来</span></span><br><span class="line">git cherry-pick -n commit <span class="comment">#拣选多个提交，合并完后可以继续拣选下一个提交</span></span><br><span class="line"></span><br><span class="line">git rebase master<span class="comment">#将master分之上超前的提交，变基到当前分支</span></span><br><span class="line">git rebase --onto master 169a6 <span class="comment">#限制回滚范围，rebase当前分支从169a6以后的提交</span></span><br><span class="line">git rebase --interactive <span class="comment">#交互模式    </span></span><br><span class="line">git rebase --<span class="built_in">continue</span><span class="comment"># 处理完冲突继续合并    </span></span><br><span class="line">git rebase --skip<span class="comment"># 跳过    </span></span><br><span class="line">git rebase --abort<span class="comment"># 取消合并</span></span><br></pre></td></tr></table></figure>

<h2 id="远程分支相关命令"><a href="#远程分支相关命令" class="headerlink" title="远程分支相关命令"></a>远程分支相关命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin remotebranch[:localbranch]<span class="comment"># 从远端拉去分支[到本地指定分支]</span></span><br><span class="line">git merge origin/branch<span class="comment">#合并远端上指定分支</span></span><br><span class="line">git pull origin remotebranch:localbranch<span class="comment"># 拉去远端分支到本地分支</span></span><br><span class="line">git push origin branch<span class="comment">#将当前分支，推送到远端上指定分支</span></span><br><span class="line">git push origin localbranch:remotebranch<span class="comment">#推送本地指定分支，到远端上指定分支</span></span><br><span class="line">git push origin :remotebranch <span class="comment"># 删除远端指定分支</span></span><br><span class="line">git push origin remotebranch --delete <span class="comment"># 删除远程分支</span></span><br><span class="line">git branch -dr branch <span class="comment"># 删除本地和远程分支</span></span><br><span class="line">git checkout -b [--track] <span class="built_in">test</span> origin/dev<span class="comment">#基于远端dev分支，新建本地test分支[同时设置跟踪]</span></span><br></pre></td></tr></table></figure>

<h2 id="git远程源"><a href="#git远程源" class="headerlink" title="git远程源"></a>git远程源</h2><p>git是一个分布式代码管理工具，所以可以支持多个仓库，在git里，服务器上的仓库在本地称之为remote。</p>
<p>个人开发时，多源用的可能不多，但多源其实非常有用。</p>
<p>正常的时候，我们在一个远程仓库作为本地代码仓库的源，但是有时候我们远程仓库的地址改变了，本地不管提交还是拉取代码都会出错，这时候就需要更新源。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin1 git@github.com:weiqifa/demo.git <span class="comment">#添加源</span></span><br><span class="line">git remote<span class="comment">#显示全部源</span></span><br><span class="line">git remote -v<span class="comment">#显示全部源+详细信息</span></span><br><span class="line">git remote rename origin1 origin2<span class="comment">#重命名</span></span><br><span class="line">git remote rm origin<span class="comment">#删除</span></span><br><span class="line">git remote show origin<span class="comment">#查看指定源的全部信息</span></span><br></pre></td></tr></table></figure>

<h2 id="想清楚了再使用的命令"><a href="#想清楚了再使用的命令" class="headerlink" title="想清楚了再使用的命令"></a>想清楚了再使用的命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push-f origin master<span class="comment">#强制提交，这个命令你领导估计也不知道你干嘛了，当然你爽了，别人就瞎逼了</span></span><br></pre></td></tr></table></figure>

<h2 id="同步其他分支的某个文件"><a href="#同步其他分支的某个文件" class="headerlink" title="同步其他分支的某个文件"></a>同步其他分支的某个文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show main:scripts/resource_tool&gt;scripts/resource_tool</span><br></pre></td></tr></table></figure>

<p>把main分支下的resource_tool 同步到当前分支下</p>
<h2 id="打包项目源码命令相关"><a href="#打包项目源码命令相关" class="headerlink" title="打包项目源码命令相关"></a>打包项目源码命令相关</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> –bare kernel/ *<span class="comment">#这样生成kernel.git 这里会包含.git文件夹*</span></span><br><span class="line"></span><br><span class="line">*git <span class="built_in">clone</span> kernel.git/ <span class="comment">#这样来解包*</span></span><br></pre></td></tr></table></figure>

<h2 id="打补丁命令相关"><a href="#打补丁命令相关" class="headerlink" title="打补丁命令相关"></a>打补丁命令相关</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff ./ &gt; *.patch</span><br><span class="line">patch -p1 </span><br></pre></td></tr></table></figure>

<h2 id="查看历史分支图"><a href="#查看历史分支图" class="headerlink" title="查看历史分支图"></a>查看历史分支图</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> –graph –all</span><br></pre></td></tr></table></figure>

<h2 id="学会查找资料"><a href="#学会查找资料" class="headerlink" title="学会查找资料"></a>学会查找资料</h2><p>总结的命令不一定会都用到，但是学会如何查找资料解决自己的问题非常关键，很多时候我们提交可能提示出错，很多的时候都是分支跟master有冲突，或者从错误日志上可以看出问题，多动动脑子，很快就可以解决了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> commit <span class="comment">#查看commit命令的帮助信息</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/18/VbOd27WLAF9xr8c.png" alt="img"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>spring项目中使用统一异常处理</title>
    <url>/2022/01/26/spring%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>spring项目中的后端表单验证</title>
    <url>/2022/01/25/spring%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%90%8E%E7%AB%AF%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h1 id="解决Spring项目中后端表单数据验证功能"><a href="#解决Spring项目中后端表单数据验证功能" class="headerlink" title="解决Spring项目中后端表单数据验证功能"></a>解决Spring项目中后端表单数据验证功能</h1><h2 id="JSR303"><a href="#JSR303" class="headerlink" title="JSR303"></a>JSR303</h2><p>采用JSR303库中提供的效验注解</p>
<p><img src="https://s2.loli.net/2022/01/25/w8LXS4QV91JGPOa.png" alt="image-20220125232949284"></p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="在bean的字段添加对应的校验注解-Valid"><a href="#在bean的字段添加对应的校验注解-Valid" class="headerlink" title="在bean的字段添加对应的校验注解(@Valid)"></a>在bean的字段添加对应的校验注解(@Valid)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Valid</span> // 添加注解确定该对象需要校验</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@RequestBody</span> BrandEntity brand)</span></span>&#123;</span><br><span class="line">        brandService.save(brand);</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h3><p>当再次进行非法请求时就会返回如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2022-01-25T15:36:50.377+0000&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;status&quot;</span>: <span class="number">400</span>,</span><br><span class="line">	<span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Bad Request&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;errors&quot;</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">&quot;codes&quot;</span>: [</span><br><span class="line">				<span class="string">&quot;NotBlank.brandEntity.name&quot;</span>,</span><br><span class="line">				<span class="string">&quot;NotBlank.name&quot;</span>,</span><br><span class="line">				<span class="string">&quot;NotBlank.java.lang.String&quot;</span>,</span><br><span class="line">				<span class="string">&quot;NotBlank&quot;</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">&quot;arguments&quot;</span>: [</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="attr">&quot;codes&quot;</span>: [</span><br><span class="line">						<span class="string">&quot;brandEntity.name&quot;</span>,</span><br><span class="line">						<span class="string">&quot;name&quot;</span></span><br><span class="line">					],</span><br><span class="line">					<span class="attr">&quot;arguments&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">					<span class="attr">&quot;defaultMessage&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">					<span class="attr">&quot;code&quot;</span>: <span class="string">&quot;name&quot;</span></span><br><span class="line">				&#125;</span><br><span class="line">			],</span><br><span class="line">			<span class="attr">&quot;defaultMessage&quot;</span>: <span class="string">&quot;不能为空&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;objectName&quot;</span>: <span class="string">&quot;brandEntity&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;field&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;rejectedValue&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;bindingFailure&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">			<span class="attr">&quot;code&quot;</span>: <span class="string">&quot;NotBlank&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">	],</span><br><span class="line">	<span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Validation failed for object=&#x27;brandEntity&#x27;. Error count: 1&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/product/brand/save&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义响应"><a href="#自定义响应" class="headerlink" title="自定义响应"></a>自定义响应</h3><p>jsr默认响应不符合业务规范，将接口改为以下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Valid</span> // 添加注解确定该对象需要校验</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@RequestBody</span> BrandEntity brand, </span></span></span><br><span class="line"><span class="function"><span class="params">	BindingResult result	// 紧跟校验对象</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 校验时是否出错</span></span><br><span class="line">        <span class="keyword">if</span>(result.hasErrors())&#123;</span><br><span class="line">            Map&lt;String, String&gt; errMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">// 获取全部校验错误，取出放入返回值内进行响应</span></span><br><span class="line">            result.getFieldErrors().forEach(error-&gt;&#123;</span><br><span class="line">                String field = error.getField();</span><br><span class="line">                String message = error.getDefaultMessage();</span><br><span class="line">                errMap.put(field,message);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="number">400</span>,<span class="string">&quot;非法参数请求&quot;</span>).put(<span class="string">&quot;data&quot;</span>,errMap);</span><br><span class="line">        &#125;</span><br><span class="line">		brandService.save(brand);</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中BindingResult必须紧跟需要校验的对象</p>
<p>此时非法请求响应如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;非法参数请求&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;code&quot;</span>: <span class="number">400</span>,</span><br><span class="line">	<span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;品牌名不能为空&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义正则校验"><a href="#自定义正则校验" class="headerlink" title="自定义正则校验"></a>自定义正则校验</h3><p>在需要正则效验的字段上使用**@Pattern**注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// other field.....</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;/[a-zA-Z]$&quot;, message = &quot;检索首字母必须是一个字母&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String firstLetter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="隐藏问题"><a href="#隐藏问题" class="headerlink" title="隐藏问题"></a>隐藏问题</h3><p>单个注解下，在不添加非空校验时，只有提交才会进行校验</p>
<p>所以若要保证字段安全校验，必须配合使用非空校验</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotBlank(message = &quot;检索首字母不能为空&quot;)</span></span><br><span class="line"><span class="meta">@Pattern(regexp = &quot;/[a-zA-Z]$&quot;, message = &quot;检索首字母必须是一个字母&quot;)</span></span><br><span class="line"><span class="comment">// other...</span></span><br><span class="line"><span class="keyword">private</span> String firstLetter;</span><br></pre></td></tr></table></figure>

<h2 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h2><p>应对不同业务下的校验规则</p>
<p>比如当新增时，需要输入全部数据，但是当修改时，只需要提交对应修改后的字段</p>
<p>此时就需要进行分组校验</p>
<h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><h4 id="修改注解"><a href="#修改注解" class="headerlink" title="修改注解"></a>修改注解</h4><p>采用 <strong>JSR303</strong> 注解的的 <strong>groups</strong> 属性进行分组校验，</p>
<p>groups要求传入Class对象，</p>
<p>如下，其中AddGroup和UpdateGroup为空接口即可；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotBlank(message = &quot;品牌名不能为空&quot;,groups = &#123;AddGroup.class,UpdateGroup.class&#125;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AddGroup</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UpdateGroup</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不同group表示在不同情况下需要校验</p>
<blockquote>
<p>注意：当使用group校验后，其他未添加分组的校验将会失效；为保证所有校验正常运行，确保其添加正确分组；</p>
</blockquote>
<p>不同注解和分组可以组合使用，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotBlank(groups = &#123;AddGroup.class&#125;)</span></span><br><span class="line"><span class="meta">@Pattern(regexp = &quot;/[a-zA-Z]$&quot;, message = &quot;检索首字母必须是一个字母&quot;,groups = &#123;AddGroup.class,UpdateGroup.class&#125;)</span></span><br><span class="line"><span class="keyword">private</span> String firstLetter;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当在AddGroup新增模式下时同时触发@NotBlank和@Pattern校验，但在UpdateGroup更新模式下时只会触发@Pattern校验</p>
</blockquote>
<h4 id="修改controller"><a href="#修改controller" class="headerlink" title="修改controller"></a>修改controller</h4><p>将此前的 <strong>@Valid</strong> 注解修改为 <strong>@Validated</strong> 注解，并填入触发的校验组 <strong>AddGroup</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Validated(AddGroup.class)</span> </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@RequestBody</span> BrandEntity brand</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line">    brandService.save(brand);</span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编指令</title>
    <url>/2021/05/17/%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><h3 id="16位寄存器"><a href="#16位寄存器" class="headerlink" title="16位寄存器"></a>16位寄存器</h3><ul>
<li>AX: accumulator, 累加寄存器</li>
<li>CX: counter, 计数寄存器</li>
<li>DX: data, 数据寄存器</li>
<li>BX: base, 基址寄存器</li>
<li>SP: stack pointer, 栈指针寄存器</li>
<li>BP: base pointer, 基址指针寄存器</li>
<li>SI: source index, 源变址寄存器</li>
<li>DI: destination index, 目的变址寄存器</li>
</ul>
<h3 id="8位寄存器"><a href="#8位寄存器" class="headerlink" title="8位寄存器"></a>8位寄存器</h3><ul>
<li><p>AL: 累加寄存器低位</p>
</li>
<li><p>CL: 计数寄存器低位</p>
</li>
<li><p>DL: 数据寄存器低位</p>
</li>
<li><p>BL: 基址寄存器低位</p>
</li>
<li><p>AH: 累加寄存器高位</p>
</li>
<li><p>CH: 计数寄存器高位</p>
</li>
<li><p>DH: 数据寄存器高位</p>
</li>
<li><p>BH: 基址寄存器高位</p>
</li>
</ul>
<h3 id="32位寄存器"><a href="#32位寄存器" class="headerlink" title="32位寄存器"></a>32位寄存器</h3><p>EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI</p>
<p>在16位寄存器的指令前加E即可表示32位寄存器, 这个字母E来源于英文单词 “Extend”;</p>
<p>虽说EAX是一个32位寄存器, 但是他的高位即没有名字也没有编号, , 也就是说, 虽然我们可以吧EAX作为两个16位寄存器使用, 但只有低十六位用起来方便, 如果我们需要使用高16位时, 需要将高十六位移位至低十六;</p>
<h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><ul>
<li>ES: 附加段寄存器 ( extra segment )</li>
<li>CS: 代码段寄存器 ( code segment )</li>
<li>SS: 栈段寄存器 ( stack segment )</li>
<li>DS: 数据段寄存器 ( data segment )</li>
<li>FS: 附加段寄存器 ( extra segment )</li>
<li>GS: 附加段寄存器 ( extra segment )</li>
</ul>
<h2 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h2><p>db是”data byte”的缩写, 指向文件中写入一个字节</p>
<p>db a, b, c;</p>
<p>写入a, b, c至文件</p>
<p>db 后可以接字符串, 会自动查询字符集存入对应的字节;</p>
<h2 id="RESB"><a href="#RESB" class="headerlink" title="RESB"></a>RESB</h2><p>resb是”reserve byte”的缩写,     </p>
<p>如果想在地址中空出10个字节, 可以写</p>
<p>RESB 10;</p>
<p>这样就会写入10个为0的字节</p>
<p>RESB 0x1fe-$</p>
<p>这里的$值当前代码行的的字节数,</p>
<p>在执行中, resb会先用0x1fe减去当前代码行数, 然后继续写入空字节</p>
<h2 id="DW"><a href="#DW" class="headerlink" title="DW"></a>DW</h2><p>dw是”data word”的缩写, 在计算机中 word一般值十六位的意思,</p>
<p>即写入16字节的数据</p>
<p>使用同DB</p>
<h2 id="DD"><a href="#DD" class="headerlink" title="DD"></a>DD</h2><p>dw是”data dounle-word”的缩写</p>
<p>即写入32字节的数据</p>
<p>使用同DB</p>
<h2 id="MOV"><a href="#MOV" class="headerlink" title="MOV"></a>MOV</h2><p>mov是”move”的缩写, 表示赋值\</p>
<p>MOV AX,0 表示AX=0</p>
<h2 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h2><p>add 是加法指令,</p>
<p>add SI,1 等于”SI=SI+1”</p>
<h2 id="CMP"><a href="#CMP" class="headerlink" title="CMP"></a>CMP</h2><p>cmp 是比较指令</p>
<p>cmp AL,3 表示将AL中的值取出来与3做比较</p>
<h2 id="JE"><a href="#JE" class="headerlink" title="JE"></a>JE</h2><p>je是”jump if equal”的缩写</p>
<p>je是条件跳转语句. 如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CMP AL,0</span><br><span class="line"></span><br><span class="line">JE fin</span><br></pre></td></tr></table></figure>

<p>相当于c语言的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( AL == <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">goto</span> fin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="INT"><a href="#INT" class="headerlink" title="INT"></a>INT</h2><p>int是”interrupt”的缩写, 表示中断的意思</p>
<h2 id="HLT"><a href="#HLT" class="headerlink" title="HLT"></a>HLT</h2><p>hlt是”halt”的缩写, 表示停止</p>
<p>让cpu进入休眠状态, 受到外部输入后重新激活</p>
<h2 id="JC"><a href="#JC" class="headerlink" title="JC"></a>JC</h2><p>jc是”jump if carry”的缩写, 表示如果进位标识位是1时就跳转</p>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链笔记</title>
    <url>/2021/05/16/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="什么是区块链？"><a href="#什么是区块链？" class="headerlink" title="什么是区块链？"></a>什么是区块链？</h2><p>区块链是一个信息技术领域的术语。从本质上讲，它是一个共享数据库，存储于其中的数据或信息，具有<strong>“去中心化”</strong>、<strong>“不可伪造”</strong>、<strong>“全程留痕”</strong>、<strong>“可以追溯”</strong>、<strong>“公开透明”</strong>、<strong>“集体维护”</strong>等特征。基于这些特征，区块链技术奠定了坚实的“信任”基础，创造了可靠的“合作”机制，具有广阔的运用前景。</p>
<blockquote>
<p>以上说明来自百度百科</p>
</blockquote>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>常用js函数</title>
    <url>/2021/04/25/%E5%B8%B8%E7%94%A8js%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p><strong>检查一个元素是否被聚焦</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hasFocus = <span class="function">(<span class="params">ele</span>) =&gt;</span> ele === <span class="built_in">document</span>.activeElement</span><br></pre></td></tr></table></figure>

<p><strong>获取一个元素的所有兄弟元素</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> siblings = <span class="function">(<span class="params">ele</span>) =&gt;</span>   .slice.call(ele.parentNode.children).filter(<span class="function">(<span class="params">child</span>) =&gt;</span> child !== ele);</span><br></pre></td></tr></table></figure>

<p><strong>获取选中文本</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getSelectedText = <span class="function">() =&gt;</span> <span class="built_in">window</span>.getSelection().toString();</span><br></pre></td></tr></table></figure>

<p><strong>回到上一页</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.back();<span class="comment">// Orhistory.go(-1);</span></span><br></pre></td></tr></table></figure>

<p><strong>清除所有 cookies</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">&#x27;;&#x27;</span>).map(<span class="function">(<span class="params">item</span>) =&gt;</span> item.split(<span class="string">&#x27;=&#x27;</span>)).reduce(<span class="function">(<span class="params">acc, [k, v]</span>) =&gt;</span> (acc[k.trim().replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)] = v) &amp;&amp; acc, &#123;&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>将 cookie 转换为对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">&#x27;;&#x27;</span>).map(<span class="function">(<span class="params">item</span>) =&gt;</span> item.split(<span class="string">&#x27;=&#x27;</span>)).reduce(<span class="function">(<span class="params">acc, [k, v]</span>) =&gt;</span> (acc[k.trim().replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)] = v) &amp;&amp; acc, &#123;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><strong>比较两个数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// `a` 和 `b` 都是数组const isEqual = (a, b) =&gt; JSON.stringify(a) === JSON.stringify(b);// 或者const isEqual = (a, b) =&gt; a.length === b.length &amp;&amp;   a.every((v, i) =&gt; v === b[i]);// 事例isEqual([1, 2, 3], [1, 2, 3]); // trueisEqual([1, 2, 3], [1, &#x27;2&#x27;, 3]); // false</span></span><br></pre></td></tr></table></figure>

<p><strong>将对象数组转换为单个对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toObject = <span class="function">(<span class="params">arr, key</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (&#123; ...a, [b[key]]: b &#125;), &#123;&#125;);</span><br><span class="line"><span class="comment">// Or</span></span><br><span class="line"><span class="keyword">const</span> toObject = <span class="function">(<span class="params">arr, key</span>) =&gt;</span> <span class="built_in">Object</span>.fromEntries(arr.map(<span class="function">(<span class="params">it</span>) =&gt;</span> [it[key], it]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">toObject(</span><br><span class="line">[&#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Alpha&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;Male&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Bravo&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;Male&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;Female&#x27;</span> &#125;]</span><br><span class="line">,<span class="string">&#x27;id&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">&#x27;1&#x27;: &#123; id: &#x27;1&#x27;, name: &#x27;Alpha&#x27;, gender: &#x27;Male&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#x27;2&#x27;: &#123; id: &#x27;2&#x27;, name: &#x27;Bravo&#x27;, gender: &#x27;Male&#x27; &#125;,</span></span><br><span class="line"><span class="comment">&#x27;3&#x27;: &#123; id: &#x27;3&#x27;, name: &#x27;Charlie&#x27;, gender: &#x27;Female&#x27; &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure>

<p><strong>根据对象数组的属性进行计数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countBy </span><br><span class="line">= <span class="function">(<span class="params">arr, prop</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> ((prev[curr[prop]] = ++prev[curr[prop]] || <span class="number">1</span>), prev), &#123;&#125;);</span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">countBy(</span><br><span class="line">[&#123; <span class="attr">branch</span>: <span class="string">&#x27;audi&#x27;</span>, <span class="attr">model</span>: <span class="string">&#x27;q8&#x27;</span>, <span class="attr">year</span>: <span class="string">&#x27;2019&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">branch</span>: <span class="string">&#x27;audi&#x27;</span>, <span class="attr">model</span>: <span class="string">&#x27;rs7&#x27;</span>, <span class="attr">year</span>: <span class="string">&#x27;2020&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">branch</span>: <span class="string">&#x27;ford&#x27;</span>, <span class="attr">model</span>: <span class="string">&#x27;mustang&#x27;</span>, <span class="attr">year</span>: <span class="string">&#x27;2019&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">branch</span>: <span class="string">&#x27;ford&#x27;</span>, <span class="attr">model</span>: <span class="string">&#x27;explorer&#x27;</span>, <span class="attr">year</span>: <span class="string">&#x27;2020&#x27;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">branch</span>: <span class="string">&#x27;bmw&#x27;</span>, <span class="attr">model</span>: <span class="string">&#x27;x7&#x27;</span>, <span class="attr">year</span>: <span class="string">&#x27;2020&#x27;</span> &#125;,]</span><br><span class="line">,<span class="string">&#x27;branch&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// &#123; &#x27;audi&#x27;: 2, &#x27;ford&#x27;: 2, &#x27;bmw&#x27;: 1 &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>检查数组是否为空</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isNotEmpty = <span class="function">(<span class="params">arr</span>) =&gt;</span> <span class="built_in">Array</span>.isArray(arr) &amp;&amp; <span class="built_in">Object</span>.keys(arr).length &gt; <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">isNotEmpty([]);  <span class="comment">// false</span></span><br><span class="line">isNotEmpty([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><strong>检查多个对象是否相等</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isEqual </span><br><span class="line">    = <span class="function">(<span class="params">...objects</span>) =&gt;</span> objects.every(</span><br><span class="line">        (obj) =&gt;  <span class="built_in">JSON</span>.stringify(obj) === <span class="built_in">JSON</span>.stringify(objects[<span class="number">0</span>])</span><br><span class="line">    );</span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line"><span class="built_in">console</span>.log(isEqual( &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;, &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125; ));     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEqual(&#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;, &#123; <span class="attr">bar</span>: <span class="string">&#x27;foo&#x27;</span> &#125;));         <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><strong>从对象数组中提取指定属性的值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pluck = <span class="function">(<span class="params">objs, property</span>) =&gt;</span> objs.map(<span class="function">(<span class="params">obj</span>) =&gt;</span> obj[property]);</span><br><span class="line"><span class="comment">// Example</span></span><br><span class="line"><span class="keyword">const</span> aa = pluck([</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;小智&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;大志&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;王大志&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">],</span><br><span class="line"><span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="comment">// [ &#x27;小智&#x27;, &#x27;大志&#x27;, &#x27;王大志&#x27; ]</span></span><br></pre></td></tr></table></figure>

<p><strong>反转对象的键和值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> invert </span><br><span class="line">    = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.keys(obj).reduce(</span><br><span class="line">        (res, k) =&gt; <span class="built_in">Object</span>.assign(res, &#123; [obj[k]]: k &#125;</span><br><span class="line">    ), &#123;&#125;);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">const</span> invert </span><br><span class="line">    = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.fromEntries(</span><br><span class="line">        <span class="built_in">Object</span>.entries(obj).map(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> [v, k])</span><br><span class="line">    );    </span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line">invert(&#123; <span class="attr">a</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">c</span>: <span class="string">&#x27;3&#x27;</span> &#125;); <span class="comment">// &#123; 1: &#x27;a&#x27;, 2: &#x27;b&#x27;, 3: &#x27;c&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>从对象中删除所有 null 和 undefined 的属性</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> removeNullUndefined = <span class="function">(<span class="params">obj</span>) =&gt;</span> </span><br><span class="line">  <span class="built_in">Object</span>.entries(obj)</span><br><span class="line">   .reduce(<span class="function">(<span class="params">a, [k, v]</span>) =&gt;</span> (v == <span class="literal">null</span> ? a : ((a[k] = v), a)), &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> removeNullUndefined = <span class="function">(<span class="params">obj</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Object</span>.entries(obj)</span><br><span class="line">  .filter(<span class="function">(<span class="params">[_, v]</span>) =&gt;</span> v != <span class="literal">null</span>)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">acc, [k, v]</span>) =&gt;</span> (&#123; ...acc, [k]: v &#125;), &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> removeNullUndefined = <span class="function">(<span class="params">obj</span>) =&gt;</span> </span><br><span class="line">    <span class="built_in">Object</span>.fromEntries(<span class="built_in">Object</span>.entries(obj).filter(<span class="function">(<span class="params">[_, v]</span>) =&gt;</span> v != <span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">removeNullUndefined(&#123;</span><br><span class="line">  foo: <span class="literal">null</span>,</span><br><span class="line">  bar: <span class="literal">undefined</span>,</span><br><span class="line">  fuzz: <span class="number">42</span>&#125;</span><br><span class="line">); </span><br><span class="line"><span class="comment">// &#123; fuzz: 42 &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>根据对象的属性对其进行排序</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line">  .sort()</span><br><span class="line">  .reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> ((p[c] = obj[c]), p), &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事例</span></span><br><span class="line"><span class="keyword">const</span> colors = &#123;</span><br><span class="line">  white: <span class="string">&#x27;#ffffff&#x27;</span>,</span><br><span class="line">  black: <span class="string">&#x27;#000000&#x27;</span>,</span><br><span class="line">  red: <span class="string">&#x27;#ff0000&#x27;</span>,</span><br><span class="line">  green: <span class="string">&#x27;#008000&#x27;</span>,</span><br><span class="line">  blue: <span class="string">&#x27;#0000ff&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sort(colors);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  black: &#x27;#000000&#x27;,</span></span><br><span class="line"><span class="comment">  blue: &#x27;#0000ff&#x27;,</span></span><br><span class="line"><span class="comment">  green: &#x27;#008000&#x27;,</span></span><br><span class="line"><span class="comment">  red: &#x27;#ff0000&#x27;,</span></span><br><span class="line"><span class="comment">  white: &#x27;#ffffff&#x27;,</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>检查一个对象是否是Promise</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isPromise = <span class="function">(<span class="params">obj</span>) =&gt;</span></span><br><span class="line">!!obj &amp;&amp; (<span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> obj === <span class="string">&#x27;function&#x27;</span>) &amp;&amp; </span><br><span class="line"><span class="keyword">typeof</span> obj.then === <span class="string">&#x27;function&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>检查一个对象是否是一个数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isArray = <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Array</span>.isArray(obj);</span><br></pre></td></tr></table></figure>

<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>检查路径是否是相对路径</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isRelative = <span class="function">(<span class="params">path</span>) =&gt;</span> !<span class="regexp">/^([a-z]+:)?[\\/]/i</span>.test(path);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">isRelative(<span class="string">&#x27;/foo/bar/baz&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">isRelative(<span class="string">&#x27;C:\\foo\\bar\\baz&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">isRelative(<span class="string">&#x27;foo/bar/baz.txt&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">isRelative(<span class="string">&#x27;foo.md&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>将字符串的第一个字符改为小写</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lowercaseFirst = <span class="function">(<span class="params">str</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;str.charAt(<span class="number">0</span>).toLowerCase()&#125;</span><span class="subst">$&#123;str.slice(<span class="number">1</span>)&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">lowercaseFirst(<span class="string">&#x27;Hello World&#x27;</span>); <span class="comment">// &#x27;hello World&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>重复一个字符串</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> repeat = <span class="function">(<span class="params">str, numberOfTimes</span>) =&gt;</span> str.repeat(numberOfTimes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">repeat(<span class="string">&#x27;ab&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// ababab</span></span><br></pre></td></tr></table></figure>

<h3 id="Dates"><a href="#Dates" class="headerlink" title="Dates"></a>Dates</h3><p><strong>给一个小时添加“am/pm”后缀</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// `h` is an hour number between 0 and 23</span></span><br><span class="line"><span class="keyword">const</span> suffixAmPm = <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;h % <span class="number">12</span> === <span class="number">0</span> ? <span class="number">12</span> : h % <span class="number">12</span>&#125;</span><span class="subst">$&#123;h &lt; <span class="number">12</span> ? <span class="string">&#x27;am&#x27;</span> : <span class="string">&#x27;pm&#x27;</span>&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">suffixAmPm(<span class="number">0</span>); <span class="comment">// &#x27;12am&#x27;</span></span><br><span class="line">suffixAmPm(<span class="number">5</span>); <span class="comment">// &#x27;5am&#x27;</span></span><br><span class="line">suffixAmPm(<span class="number">12</span>); <span class="comment">// &#x27;12pm&#x27;</span></span><br><span class="line">suffixAmPm(<span class="number">15</span>); <span class="comment">// &#x27;3pm&#x27;</span></span><br><span class="line">suffixAmPm(<span class="number">23</span>); <span class="comment">// &#x27;11pm&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>计算两个日期之间的不同天数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> diffDays = <span class="function">(<span class="params">date, otherDate</span>) =&gt;</span> <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.abs(date - otherDate) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">diffDays(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2014-12-19&#x27;</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2020-01-01&#x27;</span>)); <span class="comment">// 1839</span></span><br></pre></td></tr></table></figure>

<p><strong>检查日期是否有效</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isDateValid = <span class="function">(<span class="params">...val</span>) =&gt;</span> !<span class="built_in">Number</span>.isNaN(<span class="keyword">new</span> <span class="built_in">Date</span>(...val).valueOf());</span><br><span class="line"></span><br><span class="line">isDateValid(<span class="string">&quot;December 17, 1995 03:24:00&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><strong>检查代码是否在Node.js中运行</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isNode = <span class="keyword">typeof</span> process !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; process.versions != <span class="literal">null</span> &amp;&amp; </span><br><span class="line">  process.versions.node != <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p><strong>检查代码是否在浏览器中运行</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isBrowser = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">document</span> === <span class="string">&#x27;object&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>将URL参数转换为对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getUrlParams = <span class="function">(<span class="params">query</span>) =&gt;</span><span class="built_in">Array</span>.from(<span class="keyword">new</span>   URLSearchParams(query)).reduce(<span class="function">(<span class="params">p, [k, v]</span>) =&gt;</span> <span class="built_in">Object</span>.assign(&#123;&#125;, p, &#123; [k]: p[k]   ? (<span class="built_in">Array</span>.isArray(p[k]) ? p[k] : [p[k]]).concat(v) : v &#125;),&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">getUrlParams(location.search); <span class="comment">// Get the parameters of the current URL</span></span><br><span class="line">getUrlParams(<span class="string">&#x27;foo=Foo&amp;bar=Bar&#x27;</span>); <span class="comment">// &#123; foo: &quot;Foo&quot;, bar: &quot;Bar&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Duplicate key</span></span><br><span class="line">getUrlParams(<span class="string">&#x27;foo=Foo&amp;foo=Fuzz&amp;bar=Bar&#x27;</span>); <span class="comment">// &#123; foo: [&quot;Foo&quot;, &quot;Fuzz&quot;], bar: &quot;Bar&quot; &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>黑暗检测模式</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isDarkMode = <span class="built_in">window</span>.matchMedia &amp;&amp; <span class="built_in">window</span>.matchMedia(<span class="string">&#x27;(prefers-color-scheme: dark)&#x27;</span>).matches;</span><br></pre></td></tr></table></figure>

<p><strong>拷贝到剪切板</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> copyToClipboard = <span class="function">(<span class="params">text</span>) =&gt;</span> </span><br><span class="line">  navigator.clipboard.writeText(text);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">copyToClipboard(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>将RGB转换为十六进制</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rgbToHex = <span class="function">(<span class="params">r, g, b</span>) =&gt;</span>   <span class="string">&quot;#&quot;</span> + ((<span class="number">1</span> &lt;&lt; <span class="number">24</span>) + (r &lt;&lt; <span class="number">16</span>) + (g &lt;&lt; <span class="number">8</span>) + b).toString(<span class="number">16</span>).slice(<span class="number">1</span>);<span class="comment">// 例子rgbToHex(0, 51, 255); // #0033ff</span></span><br></pre></td></tr></table></figure>

<p><strong>生成一个随机的十六进制颜色</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomColor = <span class="function">() =&gt;</span> <span class="string">`#<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString(<span class="number">16</span>).slice(<span class="number">2</span>, <span class="number">8</span>).padEnd(<span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> randomColor = <span class="function">() =&gt;</span> <span class="string">`#<span class="subst">$&#123;(~~(<span class="built_in">Math</span>.random() * (<span class="number">1</span> &lt;&lt; <span class="number">24</span>))).toString(<span class="number">16</span>)&#125;</span>`</span>;33ff</span><br></pre></td></tr></table></figure>

<p><strong>生成随机IP地址</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomIp = <span class="function">() =&gt;</span> <span class="built_in">Array</span>(<span class="number">4</span>).fill(<span class="number">0</span>)</span><br><span class="line">.map(<span class="function">(<span class="params">_, i</span>) =&gt;</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">255</span>) + (i === <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>))</span><br><span class="line">.join(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">randomIp(); <span class="comment">// 175.89.174.131</span></span><br></pre></td></tr></table></figure>

<p><strong>使用 Node crypto 模块生成随机字符串</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomStr = <span class="function">() =&gt;</span> <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>).randomBytes(<span class="number">32</span>).toString(<span class="string">&#x27;hex&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>按长度截取字符串</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitByLen</span>(<span class="params">str,len</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rev    =    []</span><br><span class="line">    <span class="keyword">let</span> reg    =    <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`.&#123;<span class="subst">$&#123;len&#125;</span>&#125;`</span>,<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">    rev    = str.match(reg)</span><br><span class="line">    rev.push(str.substring(rev.join(<span class="string">&#x27;&#x27;</span>).length))</span><br><span class="line">    <span class="keyword">return</span> rev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>谷粒学院踩坑</title>
    <url>/2022/01/20/%E8%B0%B7%E7%B2%92%E5%AD%A6%E9%99%A2%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><h4 id="配置一样，配置中心发布的配置无法正确更新读取？"><a href="#配置一样，配置中心发布的配置无法正确更新读取？" class="headerlink" title="配置一样，配置中心发布的配置无法正确更新读取？"></a>配置一样，配置中心发布的配置无法正确更新读取？</h4><p><strong>检查项目版本</strong></p>
<p>在common项目中的pom.xml中，version改成2.1.0..1.0.RELEASE</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在其他项目中的pom.xml文件，spring-cloud.version的值，也就是springcloud的版本应改为Greenwich.SR3</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    其他变量...   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制台输出以下就成功解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Located property source: CompositePropertySource &#123;name=<span class="string">&#x27;NACOS&#x27;</span>, propertySources=[NacosPropertySource &#123;name=<span class="string">&#x27;gulimall-coupon.properties&#x27;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure>

<h4 id="千万注意application-yml中的缩进"><a href="#千万注意application-yml中的缩进" class="headerlink" title="千万注意application.yml中的缩进"></a>千万注意application.yml中的缩进</h4><p>坑死了，不小心多按了一个tab，检查了一个多小时，记录一下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">gateway:</span></span><br><span class="line">        <span class="attr">routes:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">query_route</span> <span class="comment"># 规则id</span></span><br><span class="line">            <span class="attr">uri:</span> <span class="string">https://baidu.com</span> <span class="comment"># 目的地址</span></span><br><span class="line">            <span class="attr">predicates:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">Query=url,</span> <span class="string">baidu</span> <span class="comment"># 断言匹配，满足就跳转到目的地址</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">qq_test</span></span><br><span class="line">            <span class="attr">uri:</span> <span class="string">https://qq.com</span></span><br><span class="line">            <span class="attr">predicates:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">Query=url,</span> <span class="string">qq</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span></span><br><span class="line">            <span class="attr">uri:</span> <span class="string">lb://renren-fast</span></span><br><span class="line">            <span class="attr">predicates:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">            <span class="attr">filters:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以看见cloud和gateway之间多按了一个<strong>tab</strong>导致启动时，既不报错，也不提示，最后运行时始终无法排除问题，mark一下。</p>
<h4 id="在p62中OSS存在依赖问题"><a href="#在p62中OSS存在依赖问题" class="headerlink" title="在p62中OSS存在依赖问题"></a>在p62中OSS存在依赖问题</h4><p>报错如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.NoSuchMethodError: com.aliyuncs.profile.DefaultProfile.getHttpClientConfig()Lcom/aliyuncs/http/HttpClientConfig;</span><br><span class="line">	at com.alibaba.cloud.context.AliCloudSdk.&lt;init&gt;(AliCloudSdk.java:<span class="number">76</span>)</span><br><span class="line">	at com.alibaba.cloud.context.edas.AliCloudEdasSdkFactory.getDefaultAliCloudEdasSdk(AliCloudEdasSdkFactory.java:<span class="number">34</span>)</span><br><span class="line">	at com.alibaba.cloud.spring.boot.context.autoconfigure.EdasContextAutoConfiguration.aliCloudEdasSdk(EdasContextAutoConfiguration.java:<span class="number">42</span>)</span><br><span class="line">	at com.alibaba.cloud.spring.boot.context.autoconfigure.EdasContextAutoConfiguration$$EnhancerBySpringCGLIB$$41856d21.CGLIB$aliCloudEdasSdk$<span class="number">0</span>(&lt;generated&gt;)</span><br><span class="line">	at com.alibaba.cloud.spring.boot.context.autoconfigure.EdasContextAutoConfiguration$$EnhancerBySpringCGLIB$$41856d21$$FastClassBySpringCGLIB$$ac01ea4e.invoke(&lt;generated&gt;)</span><br><span class="line">	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:<span class="number">244</span>)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:<span class="number">363</span>)</span><br><span class="line">	at com.alibaba.cloud.spring.boot.context.autoconfigure.EdasContextAutoConfiguration$$EnhancerBySpringCGLIB$$41856d21.aliCloudEdasSdk(&lt;generated&gt;)</span><br><span class="line">	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">	at java.base/java.lang.reflect.Method.invoke(Method.java:<span class="number">566</span>)</span><br><span class="line">	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:<span class="number">154</span>)</span><br><span class="line">	... <span class="number">43</span> more</span><br></pre></td></tr></table></figure>

<p>此问题是由于版本依赖问题导致</p>
<p>修改gulimall-common模块下的pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 此处排除该依赖，包默认依赖版本过低，会导致查找不到方法，引入版本为4.4.x版本 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入4.5.x版本依赖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="MySql连接存在问题"><a href="#MySql连接存在问题" class="headerlink" title="MySql连接存在问题"></a>MySql连接存在问题</h4><p>在写代码过程中，发现mysql连接非常慢，在修改连接池无果后上网搜索，可能是由于mysql主机的dns存在问题，尝试配置以下内容，情况待定…</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>补充：</p>
<p>尝试增加mysql最大连接树解决问题</p>
<p>通过sql查询当前最大连接数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;max_connections&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>临时修改最大连接数，mysql重启后失效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> max_connections<span class="operator">=</span><span class="number">1000</span>;</span><br></pre></td></tr></table></figure>

<p>永久修改连接数，在my.cnf文件中写入</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">1000</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>谷粒学院</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>springcloud</tag>
        <tag>nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>解锁网易云灰色歌曲</title>
    <url>/2021/06/24/%E8%A7%A3%E9%94%81%E7%BD%91%E6%98%93%E4%BA%91%E7%81%B0%E8%89%B2%E6%AD%8C%E6%9B%B2/</url>
    <content><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>git</li>
<li>nodejs</li>
<li>网易云音乐</li>
</ul>
<h2 id="拉取仓库"><a href="#拉取仓库" class="headerlink" title="拉取仓库"></a>拉取仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b enhanced git@github.com:DoveBoy/FixUnblockNeteaseMusic.git</span><br></pre></td></tr></table></figure>

<p>我这里仓库位置在D:\unlockNeteaseMusic</p>
<h2 id="编写WShell脚本"><a href="#编写WShell脚本" class="headerlink" title="编写WShell脚本"></a>编写WShell脚本</h2><h5 id="新建记事本-后缀改为vbs"><a href="#新建记事本-后缀改为vbs" class="headerlink" title="新建记事本,后缀改为vbs"></a>新建记事本,后缀改为vbs</h5><p><img src="https://i.loli.net/2021/06/24/WrCFSfdxjqcDipY.png" alt="image-20210624094038073"></p>
<h5 id="在文件中写入以下内容"><a href="#在文件中写入以下内容" class="headerlink" title="在文件中写入以下内容"></a>在文件中写入以下内容</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Dim WShell</span><br><span class="line">set WShell = CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line"></span><br><span class="line">WShell.Run &quot;cmd.exe /c node  D:\unlockNeteaseMusic\app.js -p 10010&quot; , 0</span><br><span class="line">WShell.Run &quot;&quot;&quot;D:/Program Files (x86)/Netease/CloudMusic/cloudmusic.exe&quot;&quot;&quot;</span><br><span class="line">Set WShell = Nothing</span><br></pre></td></tr></table></figure>

<p>其中<strong>D:\unlockNeteaseMusic\app.js</strong>是我的本地仓库地址</p>
<p><strong>D:/Program Files (x86)/Netease/CloudMusic/cloudmusic.exe</strong>是我的网易云音乐程序地址</p>
<p>不清楚的老铁可以右键快捷方式图标点击属性查看</p>
<h3 id="后续调整"><a href="#后续调整" class="headerlink" title="后续调整"></a>后续调整</h3><p>保存脚本后右击脚本, 新建快捷方式</p>
<p><img src="https://i.loli.net/2021/06/24/W3huBpHPU4cZiXo.png" alt="image-20210624094444244"></p>
<p>是不是觉得有点丑?</p>
<p><img src="https://i.loli.net/2021/06/24/orwfmXZFTW3jYGz.png" alt="image-20210624094531173"></p>
<p>没有关系, 我们再右键图标, 点击属性, 点击更换图标, 再点击浏览</p>
<p><img src="https://i.loli.net/2021/06/24/VJrMqKxdmhFWaUo.png" alt="image-20210624094645552"></p>
<p><img src="https://i.loli.net/2021/06/24/XpEAKd6tkfJOYw1.png" alt="image-20210624094723270"></p>
<p>没有网易云的软件图标怎么办?</p>
<p>没有关系, 我们可以直接选中网易云的应用程序即可</p>
<p><img src="https://i.loli.net/2021/06/24/HNh6vLABTydk2Zo.png" alt="image-20210624094816632"></p>
<p><img src="https://i.loli.net/2021/06/24/RtlP1qXEwO9xnfL.png" alt="image-20210624094829017"></p>
<p><img src="https://i.loli.net/2021/06/24/ZS2Pr8oUCset1FK.png" alt="image-20210624094850172"></p>
<p>再改一下图标名称就完成了<img src="https://i.loli.net/2021/06/24/63lOWP9tqMjkKpf.png" alt="image-20210624094918299"></p>
<p>哦, 对了, 还有最重要的一步, 还需要配置网易云音乐,</p>
<p>打开网易云设置页面后, 找到代理选项, 主机填入127.0.0.1或者localhost都可以, 端口则看你的WShell脚本的内容了</p>
<p>如<strong>WShell.Run “cmd.exe /c node  D:\unlockNeteaseMusic\app.js -p 10010” , 0</strong>中的10010表示软件启动在10010端口, 当然你可以手动修改, 不过网易云里面也要跟着修改哦 ^_^</p>
<p><img src="https://i.loli.net/2021/06/24/Qkmd9Yue2xnFfKp.png" alt="image-20210624095019374"></p>
<p>到此, 教程结束</p>
<h2 id="补充一下docker"><a href="#补充一下docker" class="headerlink" title="补充一下docker"></a>补充一下docker</h2><p>有朋友说需要docker-compose的配置<br>我打包了一份, 现在你只需要创建一个空文件夹, 在里面新建一个docker-compose.yml文件<br>在文件中写入以下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">unlock:</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">wyypojie</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">bubuzi/unblock_netease_music:v1</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">NODE_ENV:</span> <span class="string">production</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">10086</span><span class="string">:8080</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">10087</span><span class="string">:8081</span></span><br></pre></td></tr></table></figure>

<p>之后在运行一下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>跨语言跨平台RPC</title>
    <url>/2022/07/21/%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B7%A8%E5%B9%B3%E5%8F%B0RPC/</url>
    <content><![CDATA[<h1 id="跨语言跨平台RPC"><a href="#跨语言跨平台RPC" class="headerlink" title="跨语言跨平台RPC"></a>跨语言跨平台RPC</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>本文使用<strong>apache-thrift:0.12.0</strong>版本</p>
<p>C# .net framework:4.6.1</p>
<p>jdk: 11</p>
<p>Java后台框架使用spring boot</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="下载必须"><a href="#下载必须" class="headerlink" title="下载必须"></a>下载必须</h3><p>**<a href="https://archive.apache.org/dist/thrift/0.12.0/thrift-0.12.0.exe">thrift</a>**工具</p>
<h3 id="C-安装包依赖"><a href="#C-安装包依赖" class="headerlink" title="C#安装包依赖"></a>C#安装包依赖</h3><p>使用NuGet包管理工具，下载安装对应的thrift的包</p>
<p><img src="https://s2.loli.net/2022/08/09/p4BLTZYR97KOjwW.png" alt="image-20220721171654528"></p>
<h3 id="java导入maven依赖"><a href="#java导入maven依赖" class="headerlink" title="java导入maven依赖"></a>java导入maven依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.thrift<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>libthrift<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="编写thrift-idl-文件"><a href="#编写thrift-idl-文件" class="headerlink" title="编写thrift -idl 文件"></a>编写thrift -idl 文件</h2><p>在安装目录编写一份**.thrift**后缀的文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace csharp bubuzi.Rpc</span><br><span class="line">namespace java bubuzi.Rpc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef i32 int</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct People</span><br><span class="line">&#123;</span><br><span class="line">1: int ID;</span><br><span class="line">2: string Name;</span><br><span class="line">3: i16 Age;</span><br><span class="line">4: list&lt;i32&gt; onelist;</span><br><span class="line">5: set&lt;string&gt; oneSet;</span><br><span class="line">6: map&lt;i32,string&gt; oneset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service HelloService</span><br><span class="line">&#123;</span><br><span class="line"> void SetPeople(1: People people1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service GuidGenService</span><br><span class="line">&#123;</span><br><span class="line">  string getGuid(1:i32 id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>详细语法可参考<a href="https://thrift.apache.org/">官网</a></p>
<h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><p>打开命令控制台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">thrift-0.12.0.exe -r -gen java rpc.thrift # 生成java代码</span><br><span class="line">thrift-0.12.0.exe -r -gen csharp rpc.thrift # 生成c#代码</span><br></pre></td></tr></table></figure>

<p>生成代码后，会在路径中生成gen-csharp和gen-java文件夹，内部就是生成的代码</p>
<h2 id="应用启动"><a href="#应用启动" class="headerlink" title="应用启动"></a>应用启动</h2><h3 id="C-客户端调用"><a href="#C-客户端调用" class="headerlink" title="C# 客户端调用"></a>C# 客户端调用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定连接主机与端口</span></span><br><span class="line">TTransport framedTransport  = <span class="keyword">new</span> TSocket(<span class="string">&quot;localhost&quot;</span>, <span class="number">9001</span>);</span><br><span class="line"><span class="comment">// 注意连接协议，客户端与服务的必须保持一致</span></span><br><span class="line">TCompactProtocol compactProtocol = <span class="keyword">new</span> TCompactProtocol(framedTransport);</span><br><span class="line"><span class="comment">// 构建客户端程序</span></span><br><span class="line">HelloService.Client client = <span class="keyword">new</span> HelloService.Client(compactProtocol);</span><br><span class="line"></span><br><span class="line">People people = <span class="keyword">new</span> People();</span><br><span class="line"><span class="comment">// 调用远端方法</span></span><br><span class="line">client.SetPeople(people);</span><br></pre></td></tr></table></figure>



<h3 id="JAVA-服务端"><a href="#JAVA-服务端" class="headerlink" title="JAVA 服务端"></a>JAVA 服务端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置端口号和超时时间，创建Transport</span></span><br><span class="line">TServerSocket tServerSocket = <span class="keyword">new</span> TServerSocket(port,clientTimeout);</span><br><span class="line">TServer.Args tArgs = <span class="keyword">new</span> TServer.Args(tServerSocket);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Transport创建Protocol</span></span><br><span class="line"><span class="comment">// 注意，这里的TCompactProtocol和客户端应该保持一致</span></span><br><span class="line">tArgs.protocolFactory(<span class="keyword">new</span> TCompactProtocol.Factory());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Protocol创建Processor</span></span><br><span class="line">TProcessor tprocessor = <span class="keyword">new</span> HelloService.Processor&lt;HelloService.Iface&gt;(<span class="keyword">new</span> HelloServiceHandler());</span><br><span class="line">tArgs.processor(tprocessor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Server并启动</span></span><br><span class="line"><span class="comment">// 这里使用TSimpleServer，实际情况可用其他实现</span></span><br><span class="line">TServer server = <span class="keyword">new</span> TSimpleServer(tArgs);</span><br><span class="line">server.serve();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>跨语言</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>RPC</tag>
        <tag>C#</tag>
        <tag>跨语言</tag>
      </tags>
  </entry>
</search>
